//
//  FGInfrastructure.swift
//  IndigoOmtIosLibrary
//
//  Created by Sebastian Mamczak on 20.02.2017.
//
//

import Foundation
import SwiftyJSON

open class FGInfrastructure: FGObjectSerializable, CustomStringConvertible {
    
    /// MARK: - properties
    
    /// The id of the application.
    public var id: String?
    
    /// User friendly name of the infrastructure.
    public var name: String?
    
    /// A verbose description of the application.
    public var infrastructureDescription: String?
    
    /// true if the infrastructure is accessible, false otherwise.
    public var enabled: Bool?
    
    /// true if the infrastructure is virtual, false otherwise.
    /// An infrastructure is virtual if it is generated by a running task of a resource application.
    /// Default is false.
    public var vinfra: Bool?
    
    /// An ISO8601 date when the infrastructure was created.
    public var creation: Date?
    
    /// Parameters to access the infrastructure using SAGA. The infrastructure can be virtual, generated by an application and in this case the applications parameter is needed and it has to contain a list of application ids able to generate the infrastructure.
    public var parameters: [FGParameter] = []
    
    /// CustomStringConvertible.
    public var description: String {
        return "FGInfrastructure { id: \(id as String?), name: \(name as String?) }"
    }
    
    /// MARK: - lifecycle
    
    public required init?(response: HTTPURLResponse, json: JSON) {
        guard
            let id = json["id"].string
        else {
            return nil
        }
        
        self.id = id
        
        if let name = json["name"].string {
            self.name = name
        }
        if let infrastructureDescription = json["description"].string {
            self.infrastructureDescription = infrastructureDescription
        }
        if let enabled = json["enabled"].int {
            self.enabled = (enabled == 1)
        }
        if let vinfra = json["vinfra"].bool {
            self.vinfra = vinfra
        }
        if let creation = FGDateUtil.parseDate(json["creation"].string) {
            self.creation = creation
        }
        if let parametersArray = json["parameters"].array {
            for parameterJson in parametersArray {
                if let parameter = FGParameter(response: response, json: parameterJson) {
                    self.parameters.append(parameter)
                }
            }
        }
    }
    
    public init() {
        // empty
    }
    
    public func serialize() -> JSON {
        var json = JSON([:])
        
        if let id = self.id {
            json["id"].string = id
        }
        if let name = self.name {
            json["name"].string = name
        }
        if let infrastructureDescription = self.infrastructureDescription {
            json["description"].string = infrastructureDescription
        }
        if let enabled = self.enabled {
            json["enabled"].int = (enabled ? 1 : 0)
        }
        if let vinfra = self.vinfra {
            json["vinfra"].bool = vinfra
        }
        if let creation = self.creation {
            json["creation"].string = FGDateUtil.format("yyyy-MM-ddTHH:mm:ssZ", date: creation)
        }
        if parameters.isEmpty == false {
            json["parameters"].arrayObject = self.parameters.map { $0.serialize().object }
        }
        
        return json
    }
    
}

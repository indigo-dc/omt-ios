//
//  FGApplication.swift
//  IndigoOmtIosLibrary
//
//  Created by Sebastian Mamczak on 01.02.2017.
//
//

import Foundation
import SwiftyJSON

/// An application object.
open class FGApplication: FGObjectSerializable, CustomStringConvertible {
    
    // MARK: - properties
    
    /// The id of the application.
    public var id: String?
    
    /// User friendly name of the infrastructure.
    public var name: String?
    
    /// A verbose description of the application.
    public var applicationDescription: String?
    
    /// True if the infrastructure is accessible, false otherwise.
    public var enabled: Bool?
    
    /// The outcome.
    public var outcome: String?
    
    /// Parameters to access the infrastructure using SAGA.
    /// The infrastructure can be virtual, generated by an application and in this case the applications parameter is needed and it has to contain a list of application ids able to generate the infrastructure.
    public var parameters: [FGParameter] = []
    
    /// The infrastructures.
    public var infrastructures: [FGInfrastructure] = []
    
    /// The input files.
    public var inputFiles: [FGInputFile] = []
    
    /// Application links.
    public var links: [FGApiLink] = []
    
    /// CustomStringConvertible.
    public var description: String {
        return "FGApplication { id: \(id as String?), name: \(name as String?) }"
    }
    
    // MARK: - lifecycle
    
    public required init?(response: HTTPURLResponse, json: JSON) {
        guard
            let id = json["id"].string
        else {
            return nil
        }
        
        self.id = id
        self.name = json["name"].string
        self.applicationDescription = json["description"].string
        self.enabled = (json["enabled"].int == 1)
        self.outcome = json["outcome"].string
        
        if let parametersArray = json["parameters"].array {
            for parameterJson in parametersArray {
                if let parameter = FGParameter(response: response, json: parameterJson) {
                    self.parameters.append(parameter)
                }
            }
        }
        if let infrastructuresArray = json["infrastructures"].array {
            for infrastructureJson in infrastructuresArray {
                if let infrastructure = FGInfrastructure(response: response, json: infrastructureJson) {
                    self.infrastructures.append(infrastructure)
                }
            }
        }
        if let inputFilesArray = json["input_files"].array {
            for inputFileJson in inputFilesArray {
                if let inputFile = FGInputFile(response: response, json: inputFileJson) {
                    self.inputFiles.append(inputFile)
                }
            }
        }
        if let linksArray = json["_links"].array {
            for linkJson in linksArray {
                if let link = FGApiLink(response: response, json: linkJson) {
                    self.links.append(link)
                }
            }
        }
    }
    
    public init() {
        // empty
    }
    
    public func serialize() -> JSON {
        var json = JSON([:])
        
        if let id = self.id {
            json["id"].string = id
        }
        if let name = self.name {
            json["name"].string = name
        }
        if let applicationDescription = self.applicationDescription {
            json["description"].string = applicationDescription
        }
        if let enabled = self.enabled {
            json["enabled"].int = (enabled ? 1 : 0)
        }
        if let outcome = self.outcome {
            json["outcome"].string = outcome
        }
        if parameters.isEmpty == false {
            json["parameters"].arrayObject = self.parameters.map { $0.serialize().object }
        }
        if infrastructures.isEmpty == false {
            json["infrastructures"].arrayObject = self.infrastructures.map { $0.serialize().object }
        }
        if inputFiles.isEmpty == false {
            json["input_files"].arrayObject = self.inputFiles.map { $0.serialize().object }
        }
        if links.isEmpty == false {
            json["_links"].arrayObject = self.links.map { $0.serialize().object }
        }
        
        return json
    }
    
}
